<?php

/*
 * The MIT License
 *
 * Copyright 2016 Simon Mall.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace Mallapp\GeobitsBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Geobit
 *
 * @ORM\MappedSuperclass
 */
class GeobitPlus extends Geobit
{

    /**
     * @var string
     *
     * @ORM\Column(name="nickname", type="string", length=255, nullable=true)
     */    
    private $nickname;

    /**
     * @var string
     *
     * @ORM\Column(name="countryCode", type="string", length=128, nullable=true)
     */    
    private $countryCode;
    
    /**
     * @var string
     *
     * @ORM\Column(name="administrativeArea", type="string", length=255, nullable=true)
     */
    private $administrativeArea;
    
    /**
     * @var string
     *
     * @ORM\Column(name="city", type="string", length=255, nullable=true)
     */
    private $city;
    
    /**
     * @var string
     *
     * @ORM\Column(name="postalCode", type="string", length=64, nullable=true)
     */
    private $postalCode;
    
    /**
     * @var string
     *
     * @ORM\Column(name="route", type="string", length=128, nullable=true)
     */
    private $route;
    
    /**
     * @var string
     *
     * @ORM\Column(name="formattedAddress", type="string", length=1024, nullable=true)
     */
    private $formattedAddress;

    /**
     * @var string
     *
     * @ORM\Column(name="comment", type="string", length=1024, nullable=true)
     */
    private $comment;

    /**
     * @var string
     *
     * @ORM\Column(name="type", type="string", length=64, nullable=true)
     */
    private $type;


    public static function createFromSimpleLocation(SimpleLocation $loc) {
        
        $geobit = new GeobitPlus();
        
        $now = new \DateTime;
        
        $geobit->setAdministrativeArea($loc->administrativeArea)
                ->setCity($loc->city)
                ->setCountryCode($loc->countryCode)
                ->setFormattedAddress($loc->formattedAddress)
                ->setNickname($loc->nickname)
                ->setPostalCode($loc->postalCode)
                ->setRoute($loc->route)
                ->setActive(true)
                ->setChangedAt($now)
                ->setGeneratedAt($now)
                ->setLatitude($loc->latitude)
                ->setLongitude($loc->longitude);
        
        return $geobit;
        
    }
    

}
